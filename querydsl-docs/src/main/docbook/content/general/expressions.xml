<sect1>
    
    <title>Expressions</title>
    
    <sect2>
    
    	<title>Custom expressions</title>
    	
    	<para>The <code>com.mysema.query.support.Expressions</code> class is a static factory class for Querydsl 
    	expression construction.</para>
    	
    	<para>The following expression </para>
    	
 <programlisting language="java"><![CDATA[
QPerson person = QPerson.person; 	    
person.firstName.startsWith("P");
]]></programlisting>      

		<para>could be constructed like this if Q-types wouldn't be available </para>

<programlisting language="java"><![CDATA[
Path<Person> person = Expressions.path(Person.class, "person");
Path<String> personFirstName = Expressions.path(String.class, person, "firstName");
Constant<String> constant = Expressions.constant("P");
Expressions.predicate(Ops.STARTS_WITH, personFirstName, constant);
]]></programlisting>

	<para>Path instances represent variables and properties, Constants are constants, Operations are 
	operations and TemplateExpression instances
	can be used to express expressions as String templates.</para>    	
    
    </sect2>
    
    <sect2>
    
      <title>Custom projections</title>
      
      <para>For custom projections the <code>com.mysema.query.types.Projections</code> class offers a set of factory 
      methods for Bean, constructor, Tuple and other projections.</para>
    
    </sect2>
    
	<sect2>
    
      <title>Inheritance in Querydsl types</title>
      
      <para>
      To avoid a generic signature in Querydsl query types the type hierarchies are flattened. The 
      result is that all generated query types are direct subclasses of <code>com.mysema.query.types.path.EntityPathBase</code> 
      or <code>com.mysema.query.types.path.BeanPath</code> and cannot be directly cast to their Querydsl supertypes.
      </para>
      
      <para>
      Instead of a direct Java cast, the supertype reference is accessible via the _super field. 
      A _super-field is available
      in all generated query types with a single supertype :
      </para>
      
      <programlisting language="java"><![CDATA[
// from Account
QAccount extends EntityPathBase<Account>{
    // ...
}

// from BankAccount extends Account
QBankAccount extends EntityPathBase<BankAccount>{

    public final QAccount _super = new QAccount(this);
    
    // ...
}            
]]></programlisting>      
    
    <para>To cast from a supertype to a subtype you can use the as-method of the EntityPathBase class :</para>
    
    <programlisting language="java"><![CDATA[
QAccount account = new QAccount("account");
QBankAccount bankAccount = account.as(QBankAccount.class);    
]]></programlisting>    
    
    </sect2>    
    
<!--     
  <sect2>
  
    <title>Parameters</title>
    
    <para>TODO</para>
  
  </sect2>    
-->

    <sect2>
      <title>Constructor projections</title>
      
      <para>
      Querydsl provides the possibility to use constructor invocations in projections.
      To use a constructor in a query projection, you need to annotate it with the QueryProjection
      annotation :
      </para>
      
<programlisting language="java"><![CDATA[
class CustomerDTO {

  @QueryProjection
  public CustomerDTO(long id, String name){
     ...
  }

}
]]></programlisting>    

    <para>And then you can use it like this in the query</para>


<programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
JPQLQuery query = new HibernateQuery(session);
List<CustomerDTO> dtos = qry.from(customer).list(new QCustomerDTO(customer.id, customer.name));     
]]></programlisting>     

      <para>While the example is Hibernate specific, this feature is available in all modules.</para>
      
      <para>If the type with the QueryProjection annotation is not an annotated entity type, you can
      use the constructor projection like in the example, but if the annotated type would be an entity type, then
      the constructor projection would need to be created via a call to the static create method of the query type :
      </para>
      
<programlisting language="java"><![CDATA[
@Entity
class Customer {

  @QueryProjection
  public Customer(long id, String name){
     ...
  }

}
]]></programlisting>         

<programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
JPQLQuery query = new HibernateQuery(session);
List<Customer> dtos = qry.from(customer).list(QCustomer.create(customer.id, customer.name));   
]]></programlisting>   
    
    <para>Alternatively, if code generation is not an option, you can create a constructor projection like this :</para>
    
<programlisting language="java"><![CDATA[
List<Customer> dtos = qry.from(customer)
    .list(ConstructorExpression.create(Customer.class, customer.id, customer.name));   
]]></programlisting>       
    
    </sect2>
    
    <sect2>
      <title>Complex boolean expressions</title>
    
    <para>
    To construct complex boolean expressions, use the BooleanBuilder class. 
    It implements Predicate and can be used in cascaded form : 
    </para>
    
    <programlisting language="java"><![CDATA[
public List<Customer> getCustomer(String... names){
    QCustomer customer = QCustomer.customer;    
    HibernateQuery qry = new HibernateQuery(session).from(customer);    
    BooleanBuilder builder = new BoolenBuilder();
    for (String name : names){
        builder.or(customer.name.eq(name));
    }
    qry.where(builder); // customer.name eq name1 OR customer.name eq name2 OR ...  
    return qry.list(customer);
}
]]></programlisting>    
    
    </sect2>
    
    <sect2>
      <title>Case expressions</title>
      
    <para>To construct case-when-then-else expressions use the CaseBuilder class like this : </para>  
    
<programlisting language="java"><![CDATA[    
QCustomer customer = QCustomer.customer;    
Expression<String> cases = new CaseBuilder()
    .when(customer.annualSpending.gt(10000)).then("Premier")
    .when(customer.annualSpending.gt(5000)).then("Gold")
    .when(customer.annualSpending.gt(2000)).then("Silver")
    .otherwise("Bronze");
// The cases expression can now be used in a projection or condition        
]]></programlisting>     
    
    <para>For case expressions with equals-operations use the following simpler form instead :</para>
    
<programlisting language="java"><![CDATA[    
QCustomer customer = QCustomer.customer;    
Expression<String> cases = customer.annualSpending
    .when(10000).then("Premier")
    .when(5000).then("Gold")
    .when(2000).then("Silver")
    .otherwise("Bronze");
// The cases expression can now be used in a projection or condition        
]]></programlisting>         
      
    <para>Case expressions are not yet supported in JDOQL.</para>  
      
    </sect2>
    
  <sect2>
    <title>Dynamic path usage</title>
    
    <para>
    For dynamic path generation the PathBuilder class can be used. It extends EntityPathBase and can be used
    as an alternative to class generation and alias-usage for path generation. 
    </para>
    
    <para>String property :</para>
    
<programlisting language="java">
PathBuilder&lt;User&gt; entityPath = new PathBuilder&lt;User&gt;(User.class, "entity");
// fully generic access
entityPath.get("userName");
// .. or with supplied type
entityPath.get("userName", String.class);
// .. and correct signature
entityPath.getString("userName").lower();
</programlisting>

    <para>List property with component type : </para>

<programlisting language="java">
entityPath.getList("list", String.class).get(0);
</programlisting>

	<para>Using a component expression type :</para>

<programlisting language="java">
entityPath.getList("list", String.class, StringPath.class).get(0).lower();
</programlisting>

    <para>Map property with key and value type : </para>

<programlisting language="java">
entityPath.getMap("map", String.class, String.class).get("key");
</programlisting>

	<para>Using a component expression type :</para>

<programlisting language="java">
entityPath.getMap("map", String.class, String.class, StringPath.class).get("key").lower();
</programlisting>
      
  </sect2>    
    
    </sect1>    